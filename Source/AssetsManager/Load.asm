
                ifndef _ASSETS_MANAGER_LOAD_
                define _ASSETS_MANAGER_LOAD_
; -----------------------------------------
; загрузка ресурса
; In:
;   A  - идентификатор ресурса
; Out:
;   HL - адрес загрузки/распаковки
;   IX - адрес структуры FAssets
;   флаг переполнения установлен, если не удалось найти необходимого размера непрерывную область ОЗУ
;   иначе установлена страница загруженого ресурса, рег. пара HL указывает адрес
; Corrupt:
; Note:
;   - необходимо включить страницу с данными о доступной ОЗУ
; -----------------------------------------
Load:           ; расчёт адреса информации о ресурсе
                LD IXL, A
                LD IXH, HIGH Adr.AssetsTable >> 3
                ADD IX, IX  ; x2
                ADD IX, IX  ; x4
                ADD IX, IX  ; x8

                LD HL, (IX + FAssets.Address.Adr)                               ; получения адреса в HL, если ресурс в памяти
                RES ASSETS_MARKED_BIT, (IX + FAssets.Address.Page)              ; сброс флага невостребованный

                ; проверить необходимость загрузки ресурса
                BIT ASSETS_LOAD_BIT, (IX + FAssets.Flags)
                JR NZ, .IsLoaded                                                ; переход, если ресурс загружен

                ; проверка наличия, жёсткой аллокации
                BIT ASSETS_ALLOCATION_BIT, (IX + FAssets.Address.Page)
                JR Z, .Allocation                                               ; переход, если флаг аллокации сброшен

                ; -----------------------------------------
                ; распределение ресурса
                ; In:
                ;   IX - адрес структуры FAssets
                ; Out:
                ;   A  - номер страницы (0-31)
                ;   HL - адрес непрерывной области ОЗУ (#C000-#FF00)
                ;   флаг переполнения установлен, если не удалось найти необходимого размера непрерывную область ОЗУ
                ; Corrupt:
                ;   HL, DE, BC, AF
                ; -----------------------------------------
                CALL Allocation
                RET C                                                           ; выход, если не удалось найти необходимого размера непрерывную область ОЗУ

.Allocation     SET ASSETS_LOAD_BIT, (IX + FAssets.Flags)                       ; установка флаг загрузки ресурса
                CALL CopyAssetsData                                             ; копирование данных об ассетах
                ; -----------------------------------------
                ; отметить занятую область данными в доступной ОЗУ
                ; In:
                ;   IX - адрес структуры FAssets
                ; Out:
                ; Corrupt:
                ;   HL, E, BC, AF
                ; -----------------------------------------
                CALL Mark

                ; -----------------------------------------
                ; преобразование размера ресурса в блоки по 256 байт
                ; In:
                ;   IX - адрес структуры FAssets
                ; Out:
                ;   A  - количество блоков по 256 байт
                ;   BC - реальный размер блока до 16кб
                ; Corrupt:
                ;   BC, AF
                ; -----------------------------------------
                CALL CalcSizeToBlock
                ; OR A                                                            ; сброс флаг переполнения

                ; проверить флаг архивности ресурса (если ресурс имеет флаг архива, выделяется дополнительные временные 256 байт ОЗУ)
                BIT ASSETS_ARCHIVE_BIT, (IX + FAssets.Flags)
                PUSH AF                                                         ; сохранить флаг архивности ресурса
                JR Z, .NotArchived

                ; расчёт адреса загрузки ресурса (архивного)
                INC A                                                           ; +256 байт для возможности распаковывать файлы с перекртием
                LD L, (IX + FAssets.Address.Adr.Low)
                ADD A, (IX + FAssets.Address.Adr.High)
                SUB (IX + FAssets.Location.Size)
                LD H, A
                JR .Calculated

.NotArchived    ; адрес загрузки не требует корректировки
                LD HL, (IX + FAssets.Address.Adr)                               ; адрес назначения

.Calculated     PUSH HL                                                         ; сохранение адреса загрузки
                LD DE, (IX + FAssets.Address.Adr)                               ; адрес назначения
                PUSH DE                                                         ; сохранение адреса назначения

                ; -----------------------------------------
                ; преобразование линейного адреса к позиции на диске
                ; In:
                ;   IX - адрес структуры FAssets
                ; Out:
                ;   D  - номер дорожки (0..159)
                ;   E  - номер сектора (0..15)
                ; Corrupt:
                ;   DE, AF
                ; -----------------------------------------
                CALL CalcSecToDisk

                ; загрузка ресурса с диска
                LD B, (IX + FAssets.Location.Size)                              ; регистр B содержит количество секторов
                LD C, TRDOS.RD_SECTORS                                          ; номер подпрограммы #05 (чтение секторов)
                                                                                ; -----------------------------------------
                                                                                ; чтение группы секторов. в регистре 
                                                                                ; B  - количество считываемых секторов,
                                                                                ; D  - номер начального трека,
                                                                                ; E  - начальный сектор, 
                                                                                ; HL - адрес буфера, в который производится чтение
                                                                                ; -----------------------------------------

                PUSH BC                                                         ; сохранить размер и команду чтения секторов

                LD A, (IX + FAssets.Address.Page)                               ; страница назначения
                CALL SetPage                                                    ; установка страницы в 3 банк памяти (#C000-#FFFF)
                POP BC                                                          ; восстановление размер и команду чтения секторов

                CALL TRDOS.Jump3D13                                             ; переход в TR-DOS

                POP DE                                                          ; восстановление адреса назначения
                POP HL                                                          ; восстановление адреса загрузки
                POP AF                                                          ; восстановление флага архивности ресурса
                EX DE, HL
                RET Z                                                           ; выход, если флаг сброшен

                EX DE, HL
                PUSH DE
                CALL Decompressor.Forward                                       ; распаковка блока данных
                POP HL
                OR A                                                            ; сброс флага, успешность загрузки ресурса
                RET

.IsLoaded       CALL CopyAssetsData                                             ; копирование данных об ассетах
                ; установка страницы ресурса
                LD A, (IX + FAssets.Address.Page)                               ; страница назначения
                JP SetPage                                                      ; установка страницы в 3 банк памяти (#C000-#FFFF)

                endif ; ~ _ASSETS_MANAGER_LOAD_
